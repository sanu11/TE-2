(defvar a )
(defvar b )
(defvar c )
(defvar result )

(defun all (a b)
	(format t "current thread is ~a ~%"sb-thread:*current-thread*)
	(format t "operations in decimal form~%")
	(format t "addition is ~d ~%"(+ a b))
	(format t "subtraction is ~d ~%"(- a b))
	(format t "multiplication is ~d ~%"(* a b))
	(format t "division is ~d ~%"(/ a b))
)
(defun mul(a b)
	
	(setq result 0)
	(loop
		(setq c (logand a 1)) 
		(if (= c 1)
			(let();(format t "updating result ~%")
			(setq result (+ result b)))
		)
		(setq a (ash a -1))
		(setq b (ash b 1))
		(when (= a 0)
			(return result))
	)
)

(write-line "enter the two numbers")
(setf a (read))
(setf b (read))

(sb-thread:make-thread(lambda()(progn(sleep 1)
	(all a b)
	)))

(sb-thread:make-thread(lambda()(progn(sleep 2)
	(format t "current thread -- > ~a ~%"sb-thread:*current-thread*)
	(format t "addition using thread is ~d (in the decimal form )~%"(+ a b)))))
(sb-thread:make-thread(lambda()(progn(sleep 3)
	(format t "current thread -- > ~a ~%"sb-thread:*current-thread*)
	(format t "subtraction using thread is ~d (in the decimal form )~%"(- a b)))))
(sb-thread:make-thread(lambda()(progn(sleep 5)
	(format t "current thread -- > ~a ~%"sb-thread:*current-thread*)
	(format t "multiplication using thread is ~d (in decimal form )~%"(* a b)))))
(sb-thread:make-thread(lambda()(progn(sleep 6)
	(format t "current thread -- > ~a ~%"sb-thread:*current-thread*)
	(format t "division is ~f (in float)~%"(/ a b)))))
(sb-thread:make-thread(lambda()(progn(sleep 7)
	(format t "current thread -- > ~a ~%"sb-thread:*current-thread*)
	(format t "max is ~f (in decimal)~%"(max a b)))))
(sb-thread:make-thread(lambda()(progn(sleep 7)
	(format t "current thread -- > ~a ~%"sb-thread:*current-thread*)
	(format t "min is ~f (in decimal)~%"(min a b)))))
(sb-thread:make-thread(lambda()(sleep 8)
	(format t "current thread is ~a ~%"sb-thread:*current-thread*)
	(format t "binary representation of a is ~b ~%" a)
	(format t "binary representation of b is ~b ~%" b)
	(format t "binary multiplication result is ~b ~%"(mul a b))))
(print (sb-thread:list-all-threads))  ;to list all running threads
(format t "~%")
(sleep 9)
(exit)
