import random
import select
import socket
import sys
import threading
import time
import sqlite3


conn = sqlite3.connect('test.db', check_same_thread = False)

class Server:
    def __init__(self):
        self.host =socket.gethostname()
        self.port = 12234
        self.backlog = 5
        self.size = 1024
        self.server = None
        self.threads = []

    def open_socket(self):
        try:
            self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.server.bind((self.host,self.port))
            self.server.listen(5)
        except socket.error, (value,message):
            if self.server:
                self.server.close()
            print "Could not open socket: " + message
            sys.exit(1)

    def run(self):
        self.open_socket()
        running = 1
        while running:
		    cl,addr=self.server.accept()
                    c = Client(cl,addr)
		    print 'Got connection from', addr
                    c.start()
                    self.threads.append(c)

        # close all threads

        self.server.close()
        for c in self.threads:
            c.join()

class Client(threading.Thread):
    def __init__(self,client,address):
        threading.Thread.__init__(self)
        self.client = client
        self.address = address
        self.size = 1024

    def run(self):
        running = 1
        while running:	 
            localtime = time.asctime( time.localtime(time.time()) )
            datetime=localtime.split(' ')
            #print datetime
            date=datetime[3]
            date=3
            datechange=1
            while datechange:
                localtime1 = time.asctime( time.localtime(time.time()) )
                datetime1=localtime.split(' ')
                #print datetime
		date1=datetime[3]
                if date != date1:	
		    self.cursor = conn.execute("SELECT NAME  FROM QUOTE  WHERE ID = %d" %(random.randint(1,10)))
		    data = self.cursor.fetchone()
		    temp=" QUOTE OF THE DAY IS \n" +data[0]
                    self.client.send(temp)
                    date=date1
            self.client.close()
            running = 0


if __name__ == "__main__":
    s = Server()
    s.run() 
